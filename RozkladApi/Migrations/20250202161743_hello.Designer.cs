// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RozkladApi.Models;

#nullable disable

namespace RozkladApi.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250202161743_hello")]
    partial class hello
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.12");

            modelBuilder.Entity("RouteStop", b =>
                {
                    b.Property<string>("RouteId")
                        .HasColumnType("TEXT");

                    b.Property<int>("StopId")
                        .HasColumnType("INTEGER");

                    b.HasKey("RouteId", "StopId");

                    b.HasIndex("StopId");

                    b.ToTable("RouteStop");
                });

            modelBuilder.Entity("RozkladApi.Models.BusLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Stops")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BusLines");
                });

            modelBuilder.Entity("RozkladApi.Models.Departures", b =>
                {
                    b.Property<int>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("INTEGER");

                    b.Property<string>("Holidays")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Weekdays")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Weekends")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Departures");
                });

            modelBuilder.Entity("RozkladApi.Models.Route", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("EndPoint")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StartPoint")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("RozkladApi.Models.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("LineId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Saturdays")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("StopId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Sundays")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Weekdays")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LineId");

                    b.HasIndex("StopId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("RozkladApi.Models.Stop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Zone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Stops");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RouteStop", b =>
                {
                    b.HasOne("RozkladApi.Models.Route", null)
                        .WithMany()
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RozkladApi.Models.Stop", null)
                        .WithMany()
                        .HasForeignKey("StopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RozkladApi.Models.BusLine", b =>
                {
                    b.HasOne("User", null)
                        .WithMany("UserBusLines")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("RozkladApi.Models.Departures", b =>
                {
                    b.HasOne("RozkladApi.Models.Stop", null)
                        .WithOne("Departures")
                        .HasForeignKey("RozkladApi.Models.Departures", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RozkladApi.Models.Schedule", b =>
                {
                    b.HasOne("RozkladApi.Models.BusLine", "BusLine")
                        .WithMany()
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RozkladApi.Models.Stop", "Stop")
                        .WithMany()
                        .HasForeignKey("StopId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BusLine");

                    b.Navigation("Stop");
                });

            modelBuilder.Entity("RozkladApi.Models.Stop", b =>
                {
                    b.Navigation("Departures")
                        .IsRequired();
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Navigation("UserBusLines");
                });
#pragma warning restore 612, 618
        }
    }
}
